// algorithm from https://www.geeksforgeeks.org/dijkstras-shortest-path-algorithm-greedy-algo-7/

var INFINITY is 999999; var x is 5

routine dijkstra(graph: array array integer, src: integer):
                array [3] integer is
    
    var dist: array [3] integer; // The output array. dist[i] will hold the shortest distance from src to i

    var sptSet: array [3] boolean; // sptSet[i] will be true if vertex i is included in shortest path tree or shortest distance from src to i is finalized 
  
    // Initialize all distances as INFINITE
    for i in 1..graph.length loop
        dist[i] := INFINITY
    end
  
    // Distance of source vertex from itself is always 0 
    dist[src] := 0 
  
    // Find shortest path for all vertices 
    for count in 1..graph.length-1 loop
        // Pick the minimum distance vertex from the set of vertices not 
        // yet processed. u is always equal to src in the first iteration. 
        var u is minDistance(dist, sptSet)

        // Mark the picked vertex as processed 
        sptSet[u] := true 
  
        // Update dist value of the adjacent vertices of the picked vertex. 
        for v in 1..graph.length loop 

            // Update dist[v] only if is not in sptSet, there is an edge from 
            // u to v, and total weight of path from src to  v through u is 
            // smaller than current value of dist[v]
            // NOTE: no `not` in grammar
            if not sptSet[v] and graph[u][v] /= -1 and dist[u] /= INFINITY 
               and dist[u] + graph[u][v] < dist[v] then
               dist[v] := dist[u] + graph[u][v]
           end
        end
    end
    return dist
end

routine main () is
    var graph is array [3] array [3] integer
    graph[1][1] := 3; graph[1][2] := 1; graph[1][3] := 2
    graph[2][1] := 5; graph[2][2] := 4; graph[3][3] := 6
    graph[3][1] := 1; graph[3][2] := 4; graph[3][3] := 9

    var distances is dijkstra(graph, 1)
    print(distances)
end